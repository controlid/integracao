using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Controlid;
using Controlid.iDClass;
using System.Data;
using System.Security.Cryptography;

namespace RepTestAPI
{
    [TestClass]
    public class iDClassFacial_Usuarios
    {
        RepCid rep;

        string correct_image_b64 = "";
        string invalid_image_b64 = "";

        [TestInitialize]
        public void Conectar()
        {
            rep = Config.ConectarREP();
        }

        [TestMethod, TestCategory("iDClass Facial RepCid Usuarios")]
        public void CadastrarComImagem()
        {
            if (rep.IsFacial == null || rep.IsFacial == false)
            {
                Assert.Inconclusive("Rep não facial");
            }

            long cpf = 72381738;
            string nome = "Teste cadastrar com imagem";
            int codigo = 123213;
            string senha = "123";
            long matricula = 32134;
            uint rfid = 4123213;
            int privilegios = 0;
            string image_b64 = correct_image_b64;
            UInt32 image_timestamp = (UInt32)DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            string face_error;
            bool gravou_usuario, gravou_face;
            
            bool success = rep.iDClassFacial_GravarUsuario(cpf, nome, codigo, senha, matricula, rfid, privilegios, image_b64, image_timestamp, out face_error, out gravou_usuario, out gravou_face);

            if(!success || !gravou_face || !gravou_usuario)
            {
                Assert.Fail("Falha ao cadastrar usuário com imagem");
            }

            int nun_users;
            if(!rep.iDClassFacial_CarregarUsuarios(out nun_users))
            {
                Assert.Fail("Falha ao carregar usuários após cadastrar com imagem");
            }

            bool possui_face;
            UInt32 image_timestamp_lido;
            if(!rep.iDClassFacial_LerDadosUsuario(cpf, out _, out _, out _, out _, out _, out _, out possui_face, out image_timestamp_lido))
            {
                Assert.Fail("Falha ao ler dados de usuário");
            }

            if(!possui_face || image_timestamp_lido != image_timestamp)
            {
                Assert.Fail("Imagem não foi cadastrada corretament");
            }

            bool removeu;
            if(!rep.RemoverUsuario671(cpf, out removeu) && removeu)
            {
                Assert.Fail("Falha ao deletar o usuário pós teste");
            }
        }

        [TestMethod, TestCategory("iDClass Facial RepCid Usuarios")]
        public void AdicionarImagemAposCadastrar()
        {
            if (rep.IsFacial == null || rep.IsFacial == false)
            {
                Assert.Inconclusive("Rep não facial");
            }

            long cpf = 72381738;
            string nome = "Teste cadastrar com imagem";
            int codigo = 123213;
            string senha = "123";
            long matricula = 32134;
            uint rfid = 4123213;
            int privilegios = 0;
            string image_b64 = null;
            UInt32 image_timestamp = 0;
            bool gravou_usuario, gravou_face;
            string face_error;

            bool success = rep.iDClassFacial_GravarUsuario(cpf, nome, codigo, senha, matricula, rfid, privilegios, image_b64, image_timestamp, out face_error, out gravou_usuario, out gravou_face);

            if (!success || gravou_face || !gravou_usuario)
            {
                Console.WriteLine(string.Format("{0} {1} {2}", success, gravou_face, gravou_usuario));
                Assert.Fail("Falha ao cadastrar usuário com imagem");
            }

            image_timestamp = (UInt32)DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            if (!rep.iDClassFacial_CadastrarImagemB64(cpf, correct_image_b64, image_timestamp, out _))
            {
                Assert.Fail("Falha ao cadastrar a imagem do usuário");
            }

            int nun_users;
            if (!rep.iDClassFacial_CarregarUsuarios(out nun_users))
            {
                Assert.Fail("Falha ao carregar usuários após cadastrar com imagem");
            }

            bool possui_face;
            UInt32 image_timestamp_lido;
            if (!rep.iDClassFacial_LerDadosUsuario(cpf, out _, out _, out _, out _, out _, out _, out possui_face, out image_timestamp_lido))
            {
                Assert.Fail("Falha ao ler dados de usuário");
            }

            if (!possui_face || image_timestamp_lido != image_timestamp)
            {
                Assert.Fail("Imagem não foi cadastrada corretament");
            }

            bool removeu;
            if (!rep.RemoverUsuario671(cpf, out removeu) && removeu)
            {
                Assert.Fail("Falha ao deletar o usuário pós teste");
            }
        }

        [TestMethod, TestCategory("iDClass Facial RepCid Usuarios")]
        public void AdicionarImagemComErrosNoCadastro()
        {
            if (rep.IsFacial == null || rep.IsFacial == false)
            {
                Assert.Inconclusive("Rep não facial");
            }

            long cpf = 72381738;
            string nome = "Teste cadastrar com imagem";
            int codigo = 123213;
            string senha = "123";
            long matricula = 32134;
            uint rfid = 4123213;
            int privilegios = 0;
            string image_b64 = invalid_image_b64;
            UInt32 image_timestamp = (UInt32)DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            string face_error;
            bool gravou_usuario, gravou_face;

            bool success = rep.iDClassFacial_GravarUsuario(cpf, nome, codigo, senha, matricula, rfid, privilegios, image_b64, image_timestamp, out face_error, out gravou_usuario, out gravou_face);

            // Deve falhar, não deve gravar a face, mas deve gravar o usuário
            if (success || gravou_face || !gravou_usuario)
            {
                Assert.Fail("Falha ao cadastrar usuário com imagem incorreta");
            }

            if(face_error == null)
            {
                Assert.Fail("Erro de cadastro facial não foi retornado");
            }

            int nun_users;
            if (!rep.iDClassFacial_CarregarUsuarios(out nun_users))
            {
                Assert.Fail("Falha ao carregar usuários após cadastrar com imagem");
            }

            bool possui_face;
            UInt32 image_timestamp_lido;
            string nome_out;
            if (!rep.iDClassFacial_LerDadosUsuario(cpf, out nome_out, out _, out _, out _, out _, out _, out possui_face, out image_timestamp_lido))
            {
                Assert.Fail("Falha ao ler dados de usuário");
            }

            if (possui_face || image_timestamp_lido != 0)
            {
                Console.WriteLine("{0} {1} {2}", possui_face, image_timestamp_lido, nome_out);
                Assert.Fail("Imagem inválida foi cadastrada");
            }

            bool removeu;
            if (!rep.RemoverUsuario671(cpf, out removeu) && removeu)
            {
                Assert.Fail("Falha ao deletar o usuário pós teste");
            }
        }

        [TestMethod, TestCategory("iDClass Facial RepCid Usuarios")]
        public void AdicionarImagemComErrosAposCadastro()
        {
            if (rep.IsFacial == null || rep.IsFacial == false)
            {
                Assert.Inconclusive("Rep não facial");
            }

            long cpf = 72381738;
            string nome = "Teste cadastrar imagem com erros apos cadastro";
            int codigo = 123213;
            string senha = "123";
            long matricula = 32134;
            uint rfid = 4123213;
            int privilegios = 0;
            string image_b64 = null;
            UInt32 image_timestamp = 0;
            bool gravou_usuario, gravou_face;
            string face_error;

            bool success = rep.iDClassFacial_GravarUsuario(cpf, nome, codigo, senha, matricula, rfid, privilegios, image_b64, image_timestamp, out face_error, out gravou_usuario, out gravou_face);

            if (!success || gravou_face || !gravou_usuario)
            {
                Console.WriteLine(string.Format("{0} {1} {2}", success, gravou_face, gravou_usuario));
                Assert.Fail("Falha ao cadastrar usuário com imagem");
            }

            image_b64 = invalid_image_b64;
            image_timestamp = (UInt32)DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            if (rep.iDClassFacial_CadastrarImagemB64(cpf, image_b64, image_timestamp, out face_error))
            {
                Assert.Fail("Face inválida foi cadastrada e não deveria");
            }

            if(face_error == null)
            {
                Assert.Fail("Erro de cadastro de face não foi retornado");
            }

            int nun_users;
            if (!rep.iDClassFacial_CarregarUsuarios(out nun_users))
            {
                Assert.Fail("Falha ao carregar usuários após cadastrar com imagem");
            }

            bool possui_face;
            UInt32 image_timestamp_lido;
            if (!rep.iDClassFacial_LerDadosUsuario(cpf, out _, out _, out _, out _, out _, out _, out possui_face, out image_timestamp_lido))
            {
                Assert.Fail("Falha ao ler dados de usuário");
            }

            if (possui_face || image_timestamp_lido != 0)
            {
                Console.WriteLine(string.Format("{0} {1}", possui_face, image_timestamp_lido));
                Assert.Fail("Imagem inválida foi cadastrada");
            }

            bool removeu;
            if (!rep.RemoverUsuario671(cpf, out removeu) && removeu)
            {
                Assert.Fail("Falha ao deletar o usuário pós teste");
            }
        }

        [TestMethod, TestCategory("iDClass Facial RepCid Usuarios")]
        public void PaginacaoDeUsuariosComFace()
        {
            if (rep.IsFacial == null || rep.IsFacial == false)
            {
                Assert.Inconclusive("Rep não facial");
            }

            long cpf = 72381738;
            string nome = "Teste cadastrar com imagem";
            int codigo = 123213;
            string senha = "123";
            long matricula = 32134;
            uint rfid = 4123213;
            int privilegios = 0;
            string image_b64 = correct_image_b64;
            UInt32 image_timestamp = (UInt32)DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            string face_error;
            bool gravou_usuario, gravou_face;

            bool success = rep.iDClassFacial_GravarUsuario(cpf, nome, codigo, senha, matricula, rfid, privilegios, image_b64, image_timestamp, out face_error, out gravou_usuario, out gravou_face);

            if (!success || !gravou_face || !gravou_usuario)
            {
                Assert.Fail("Falha ao cadastrar usuário com imagem");
            }

            int nun_users;
            if (!rep.iDClassFacial_CarregarUsuarios(out nun_users))
            {
                Assert.Fail("Falha ao carregar usuários após cadastrar com imagem");
            }

            long cpf_lido;
            string nome_lido;
            int codigo_lido;
            string senha_lida;
            long matricula_lida;
            uint rfid_lido;
            int privilegio_lido;
            bool possui_face_lido;
            bool encontrou_usuario_criado = false;
            while (rep.iDClassFacial_LerUsuario(out cpf_lido, out nome_lido, out matricula_lida, out codigo_lido, out senha_lida, out rfid_lido, out privilegio_lido, out possui_face_lido))
            {
                if(cpf_lido == cpf)
                {
                    Assert.AreEqual(nome, nome_lido);
                    Assert.AreEqual(matricula, matricula_lida);
                    Assert.AreEqual(codigo, codigo_lido);
                    Assert.AreEqual(senha, senha_lida);
                    Assert.AreEqual(rfid, rfid_lido);
                    Assert.AreEqual(privilegios, privilegio_lido);
                    Assert.IsTrue(possui_face_lido);
                    encontrou_usuario_criado = true;
                }
            }

            Assert.IsTrue(encontrou_usuario_criado);

            bool removeu;
            if (!rep.RemoverUsuario671(cpf, out removeu) && removeu)
            {
                Assert.Fail("Falha ao deletar o usuário pós teste");
            }
        }

        [TestMethod, TestCategory("Rep iDClass Facial")]
        public void Camera_LerFaceUsuario()
        {
            if (rep.IsFacial == null || rep.IsFacial == false)
            {
                Assert.Inconclusive("Rep não facial");
            }

            long cpf = 72381738;
            string nome = "Teste cadastrar com imagem";
            int codigo = 123213;
            string senha = "123";
            long matricula = 32134;
            uint rfid = 4123213;
            int privilegios = 0;
            string image_b64 = correct_image_b64;
            UInt32 image_timestamp = (UInt32)DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            string face_error;
            bool gravou_usuario, gravou_face;

            bool success = rep.iDClassFacial_GravarUsuario(cpf, nome, codigo, senha, matricula, rfid, privilegios, image_b64, image_timestamp, out face_error, out gravou_usuario, out gravou_face);

            if (!success || !gravou_face || !gravou_usuario)
            {
                Assert.Fail("Falha ao cadastrar usuário com imagem");
            }

            string read_image_b64;
            bool? possui_face;
            if (!rep.iDClassFacial_ResgatarImagemB64(cpf, out read_image_b64, out possui_face))
            {
                Assert.Fail("Falha ao carregar usuários após cadastrar com imagem");
            }

            Assert.IsNotNull(possui_face);
            Assert.IsTrue(possui_face.Value);
            if(!String.Equals(read_image_b64.Substring(100, 100), image_b64.Substring(100, 100)))
            {
                Assert.Fail("Falha ao recuperar imagem de usuário");
            }

            bool removeu;
            if (!rep.RemoverUsuario671(cpf, out removeu) && removeu)
            {
                Assert.Fail("Falha ao deletar o usuário pós teste");
            }
        }
    }
}
